{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAMC,iBACN,IAAMC,EAAaN,EAAKE,cAAc,kBAChCK,EAAYP,EAAKE,cAAc,iBAC/BM,EAAcR,EAAKE,cAAc,mBACnCO,EAAI,EAEFC,EAAWC,aAAY,WAoB/B,IAAuBC,EAAUC,EACzBC,GADeF,EAnBLH,EAmBeI,EAnBZP,EAAWS,MAoBxBD,EAAgBE,KAAKC,SAAW,GAC/B,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLP,EACFK,EAAQ,CAAEP,WAAUC,UAEpBO,EAAO,CAAER,WAAUC,YAEpBA,OA3BAS,MAAK,SAAAC,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MACjBW,EAAA1B,GAAS2B,OAAOC,QACd,qBAAwCC,OAAnBf,EAAW,EAAE,QAAYe,OAANd,EAAM,OAEhDe,QAAQC,IAAI,uBAA+CF,OAArBf,GAAY,EAAG,QAAYe,OAANd,EAAM,UAElEiB,OAAM,SAAAP,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MAClBW,EAAA1B,GAAS2B,OAAOM,QAAQ,aAAmCJ,OAArBf,GAAY,EAAG,QAAYe,OAANd,EAAM,OACjEe,QAAQC,IAAI,sBAA4CF,OAArBf,GAAY,EAAG,QAAYe,OAANd,EAAM,WAElEJ,GAAK,KAEKuB,OAAOxB,EAAYO,QAC3BkB,cAAcvB,KAEfH,EAAUQ,U","sources":["src/js/03-promises.js"],"sourcesContent":["//модуль  для Alert\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  const delayInput = form.querySelector('[name=\"delay\"]');\n  const stepInput = form.querySelector('[name=\"step\"]');\n  const amountInput = form.querySelector('[name=\"amount\"]');\n  let i = 0;\n\n  const intervId = setInterval(() => {\n    createPromise(i, delayInput.value)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `Fulfilled promise ${position + 1} in ${delay}ms`\n        );\n        console.log(`✅ Fulfilled promise ${(position += 1)} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(` Rejected ${(position += 1)} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${(position += 1)} in ${delay}ms`);\n      });\n    i += 1;\n\n    if (i === Number(amountInput.value)) {\n      clearInterval(intervId);\n    }\n  }, stepInput.value);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","i","intervId","setInterval","position","delay","shouldResolve","value","Math","random","Promise","resolve","reject","setTimeout","then","param","$parcel$interopDefault","Notify","success","concat","console","log","catch","failure","Number","clearInterval"],"version":3,"file":"03-promises.86bf0099.js.map"}